// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id             String  @id
  name           String  @unique
  nickname       String
  mail           String  @unique
  passphraseHash String? @map("passphrase_hash")
  bio            String  @default("")
  role           Int     @default(0)
  frozen         Int     @default(0)
  silenced       Int     @default(0)
  status         Int     @default(0)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  following          Following[]          @relation("following")
  followed           Following[]          @relation("followed")
  avatar             AccountAvatar[]      @relation("avatar")
  header             AccountHeader[]      @relation("header")
  note               Note[]               @relation("author")
  reaction           Reaction[]
  bookmark           Bookmark[]
  listMember         ListMember[]
  medium             Medium[]
  accountVerifyToken AccountVerifyToken[]
  list               List[]

  recievedNotification Notification[] @relation("recipient")
  sentNotification     Notification[] @relation("actor")
  conversation         Note[]         @relation("conversation")

  @@map("account")
}

model Following {
  from   Account @relation("followed", fields: [fromId], references: [id])
  fromId String  @map("from_id")
  to     Account @relation("following", fields: [toId], references: [id])
  toId   String  @map("to_id")
  state  Int     @default(1)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@id([fromId, toId])
  @@map("following")
}

model Note {
  id         String   @id
  text       String   @db.Text
  visibility Int      @default(0)
  author     Account  @relation("author", fields: [authorId], references: [id])
  authorId   String   @map("author_id")
  renoteId   String?  @map("renote_id")
  renote     Note?    @relation("renote", fields: [renoteId], references: [id])
  sendTo     Account? @relation("conversation", fields: [sendToId], references: [id])
  sendToId   String?  @map("send_to_id")

  createdAt      DateTime         @default(now()) @map("created_at")
  deletedAt      DateTime?        @map("deleted_at")
  renotes        Note[]           @relation("renote")
  reaction       Reaction[]
  bookmark       Bookmark[]
  noteAttachment NoteAttachment[]

  @@map("note")
}

model Reaction {
  reactionId  String  @id
  reactedById String  @map("reacted_by_id")
  reactedBy   Account @relation(fields: [reactedById], references: [id])
  reactedToId String  @map("reacted_to_id")
  reactedTo   Note    @relation(fields: [reactedToId], references: [id])
  body        String

  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  @@unique([reactedById, reactedToId])
  @@map("reaction")
}

model Bookmark {
  noteId    String  @map("note_id")
  note      Note    @relation(fields: [noteId], references: [id])
  accountId String  @map("account_id")
  account   Account @relation(fields: [accountId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  @@id([noteId, accountId])
  @@map("bookmark")
}

model List {
  id         String  @id
  title      String
  visibility Int     @default(0)
  accountId  String  @map("account_id")
  account    Account @relation(fields: [accountId], references: [id])

  createdAt  DateTime     @default(now()) @map("created_at")
  deletedAt  DateTime?    @map("deleted_at")
  listMember ListMember[]

  @@map("list")
}

model ListMember {
  listId   String  @map("list_id")
  list     List    @relation(fields: [listId], references: [id])
  memberId String  @map("member_id")
  member   Account @relation(fields: [memberId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  @@id([listId, memberId])
  @@map("list_member")
}

model Medium {
  id             String           @id
  name           String
  mime           String
  hash           String
  nsfw           Boolean
  authorId       String           @map("author_id")
  author         Account          @relation(fields: [authorId], references: [id])
  thumbnailUrl   String
  url            String
  createdAt      DateTime         @default(now()) @map("created_at")
  deletedAt      DateTime?        @map("deleted_at")
  noteAttachment NoteAttachment[]
  AccountAvatar  AccountAvatar[]
  AccountHeader  AccountHeader[]

  @@map("medium")
}

model AccountAvatar {
  accountId String  @unique @map("account_id")
  account   Account @relation("avatar", fields: [accountId], references: [id])
  mediumId  String  @map("medium_id")
  medium    Medium  @relation(fields: [mediumId], references: [id])

  @@id([accountId, mediumId])
  @@map("account_avatar")
}

model AccountHeader {
  accountId String  @unique @map("account_id")
  account   Account @relation("header", fields: [accountId], references: [id])
  mediumId  String  @map("medium_id")
  medium    Medium  @relation(fields: [mediumId], references: [id])

  @@id([accountId, mediumId])
  @@map("account_header")
}

model NoteAttachment {
  mediumId String @map("medium_id")
  medium   Medium @relation(fields: [mediumId], references: [id])
  noteId   String @map("note_id")
  note     Note   @relation(fields: [noteId], references: [id])

  alt       String
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  @@id([mediumId, noteId])
  @@map("note_attachment")
}

model AccountVerifyToken {
  accountId String   @id @map("account_id")
  account   Account  @relation(fields: [accountId], references: [id])
  token     String
  expiresAt DateTime @map("expires_at")

  @@map("account_verify_token")
}

model Notification {
  id               String    @id
  recipientID      String    @map("recipient_id")
  recipient        Account   @relation("recipient", fields: [recipientID], references: [id])
  notificationType Int       @map("notification_type")
  actorType        String
  actorID          String    @map("actor_id")
  actor            Account   @relation("actor", fields: [actorID], references: [id])
  createdAt        DateTime  @map("created_at")
  readAt           DateTime? @map("read_at")

  sourceID   String @map("source_id")
  activityID String @map("activity_id")
}
